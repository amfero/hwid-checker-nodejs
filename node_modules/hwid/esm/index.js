var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { createHash } from 'crypto';
import { ERR_UNKNOWN_PARSE, ERR_UNSUPPORTED_PLATFORM } from './errors';
import { unixHWID } from './unix';
import { win32HWID } from './win32';
const { platform } = process;
const hash = (id, algo) => {
    const h = createHash(algo || 'sha256');
    h.update(id);
    return h.digest('hex');
};
const resolveID = () => __awaiter(void 0, void 0, void 0, function* () {
    switch (platform) {
        case 'win32':
            return win32HWID();
        case 'darwin':
        case 'linux':
            return unixHWID();
        default:
            return undefined;
    }
});
export const getHWID = (options) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    const hwid = yield resolveID();
    if (hwid === undefined)
        throw ERR_UNSUPPORTED_PLATFORM;
    if (hwid === '')
        throw ERR_UNKNOWN_PARSE;
    const shouldHash = (_a = options === null || options === void 0 ? void 0 : options.hash) !== null && _a !== void 0 ? _a : false;
    const hashed = shouldHash ? hash(hwid, options && options.algorithm) : hwid;
    return ((_b = options === null || options === void 0 ? void 0 : options.upper) !== null && _b !== void 0 ? _b : false) ? hashed.toUpperCase() : hashed.toLowerCase();
});
export { getHWID as default };
